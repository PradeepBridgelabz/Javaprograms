package com.bridgelab.ooprograms;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import com.bridgelab.utility.*;
public class Main
{
					ArrayList<DoctersModel> doctorList;
					ArrayList<PatientModel> patientsList;
					@SuppressWarnings("rawtypes")
					Utility utility;
					HashMap<DocterAppointmentModel,Integer> appoientment;
					
					public Main()
					{
						utility=new Utility();
						doctorList=new ArrayList<DoctersModel>();
						patientsList=new ArrayList<PatientModel>();
						appoientment=new HashMap<DocterAppointmentModel,Integer>();
					}
					
	public static void main(String args[]) throws ParseException, IOException, org.json.simple.parser.ParseException
	{
		Main mainObject=new Main();
		String exit;

		do
		{
			System.out.println("Menu");
			System.out.println("1: Enter Doctors Detials");
			System.out.println("2: Enter Patients Detils");
			System.out.println("3: Search Patients Detils");
			System.out.println("4: Search Doctors Detils");
			System.out.println("5: Display all Doctors detils");
			System.out.println("6: Display all Patient detils");
			System.out.println("7: Take Appoientment");
			System.out.println("8: Print Appoientment");
			System.out.println("9: Print Popular Doctor");
			System.out.println("10: Print Popular Specialization");
			System.out.println("Enter Your Choice");
			mainObject.menuChoice(mainObject.utility.IntegerInput());
			System.out.println("Enter E to Exit");
			exit=mainObject.utility.StringInput();
		}
		while(!exit.equalsIgnoreCase("E"));
		
	}

	@SuppressWarnings("unchecked")
	public void menuChoice(int choice) throws ParseException, IOException, org.json.simple.parser.ParseException
	{
		System.out.println();
		switch(choice){
			case 1: System.out.println("Enter Name: ");
					String name=utility.StringInput();
					System.out.print("Enter Id: ");
					String id=utility.StringInput();
					System.out.println();
					System.out.print("Enter specialization: ");
					String specialization=utility.StringInput();
					System.out.println();
					System.out.print("Enter availability (1:AM 2:PM 3:both)");
					String availability=utility.StringInput();
					System.out.println();
					doctorList.add(new DoctersModel(name,id,specialization,availability));
		break; 
		
			case 2: System.out.println("Enter Patients Details ...");
					System.out.print("Enter Id: ");
					String patientId=utility.StringInput();
					System.out.println();
					System.out.print("Enter Mobile Number: ");
					String mobileNumber=utility.StringInput();
					System.out.println();
					System.out.print("Enter age: ");
					int age=utility.IntegerInput();
					System.out.println();
					patientsList.add(new PatientModel(patientId,mobileNumber,age));
		break;
		
		case 3:     searchPatientMenu();
		break;
		
		case 4:     searchDoctorsMenu();
		break;
		
		case 5:     //System.out.println("Id    Name   Specialization   availability");
					/*String string=doctorList.toString();
					System.out.println(string);
					System.out.println();*/
		            DoctersModel.disply();
		break;
		
		case 6:     PatientModel.disply();
					System.out.println();
		break;
		
		case 7:     takeAppoientment();
		break;
		
		case 8:     utility.printMap(appoientment);
		break;
		
		/*case 9:     ArrayList<Integer> list=printPopularDoctor();
				if(list.size()>0)
				{
					System.out.println("Famous doctor is :");
					System.out.println(list);
				}
				else
					System.out.println("No doctor is popular.");
		break;*/
		
		/*case 10:    printPopularSpecialization();
		break;*/
		
		}

	}
		public void searchPatientMenu() throws FileNotFoundException, IOException, org.json.simple.parser.ParseException
		{
				System.out.println("Search Patient By");
				System.out.println("1 Mobile Number");
				System.out.println("2 Id");
				System.out.println("3 Age");
				System.out.println("Enter Your Choice");
				searchPatient(utility.IntegerInput());
		}
		public void searchDoctorsMenu() throws FileNotFoundException, IOException, org.json.simple.parser.ParseException
		{
				System.out.println("Search Doctors By");
				System.out.println("1 Name");
				System.out.println("2 Id");
				//System.out.println("3 Specialization");
				System.out.println("3 Availability");
				System.out.println("Enter Your Choice");
				searchDoctors(utility.IntegerInput());
		}
		
			public void searchDoctors(int choice) throws FileNotFoundException, IOException, org.json.simple.parser.ParseException
			{
				System.out.println();
				switch(choice)
				{
						case 1: System.out.println("Enter Name of Doctor");
						        /*System.out.println(search.searchDoctorName(doctorList,utility.StringInput()));*/
						        DoctersModel.searchByName(utility.StringInput());
					break;
					
						case 2: System.out.println("Enter Id of Doctor");
						        DoctersModel.searchById(utility.StringInput());
					break;
					
						/*case 3:  
						        System.out.println("Enter Specialization of Doctor");
								DoctersModel.searchBySpecialization(utility.StringInput());
					break;*/
					
						case 3:System.out.println("Enter Availability of Doctor");
				                DoctersModel.searchByAvailability(utility.StringInput());
						break;
						
				}
			}
				public void searchPatient(int choice) throws FileNotFoundException, IOException, org.json.simple.parser.ParseException
				{
					System.out.println();
					switch(choice)
					{
						case 1: System.out.println("Enter Id of Patient");
						        PatientModel.searchByMobileNUmber(patientsList,utility.StringInput());
						       
					break;
					
						case 2: System.out.println("Enter Id of Patient");
						        PatientModel.searchById(patientsList,utility.StringInput());
					break;
					
						case 3: System.out.println("Enter Age of Patient");
						PatientModel.searchByAge(patientsList,utility.IntegerInput());
					break; 
					
					}
				}

	@SuppressWarnings({ "unchecked", "unused" })
	public void takeAppoientment() throws ParseException, IOException, org.json.simple.parser.ParseException
	{
		System.out.println("Enter Doctor Id");
		String docorId=utility.StringInput();
		int count=DoctersModel.search(docorId);
		if(count>1)
			{
			System.out.println("There are "+count+" Number of Docters with a id "+docorId);
				System.out.println("Enter Date of Appoientmentd (01/05/2016):");
				Date date=utility.stringToDate(utility.StringInput());
				String date1=date.toString();
			if(date==null)
				System.out.println("Date format is not correct");
				else
				{
					String name=utility.StringInput();
					DoctersModel.upDateAppointmentIntoFile(date1,docorId,count,name);
						
			     
					
				}
				
			}
		else if(count==1)
		{
			System.out.println("Enter Date of Appoientmentd (01/05/2016):");
			Date date=utility.stringToDate(utility.StringInput());
			String date1=date.toString();
			if(date==null)
			       System.out.println("Date format is not correct");
			else
			{
				System.out.println("Please enter.... Doctore name..");
				String name=utility.StringInput();
				DoctersModel.upDateAppointmentIntoFile(date1,docorId,count,name);
			}
		}
		
			else
			{
				 System.out.println("Invalid Doctor Id");
			}
		 
	}
	   
	
	/*public ArrayList<Integer> printPopularDoctor()
	{
		ArrayList<Integer> list=new ArrayList<>();
		int totalAppoientment = totalAppoientment();
		HashMap<Integer,Integer> doctorMap=new HashMap<>();
		@SuppressWarnings("rawtypes")
		Iterator it = appoientment.entrySet().iterator();
		while (it.hasNext())
		{
			@SuppressWarnings("rawtypes")
			Map.Entry pair = (Map.Entry)it.next();
			int doctorId = ((DocterAppointmentModel)pair.getKey()).getDoctorId();
			if(doctorMap.containsKey(doctorId))
			{
				doctorMap.put(doctorId,doctorMap.get(doctorId)+1);
			}
			else
			{
				doctorMap.put(doctorId,1);
			}
		}
		it = doctorMap.entrySet().iterator();
		while (it.hasNext()) 
		{
			@SuppressWarnings("rawtypes")
			Map.Entry pair = (Map.Entry)it.next();
			if((Integer)pair.getValue() >= ((Integer)(totalAppoientment/4)))
				list.add(((Integer)pair.getKey()));
		}
		return list;
	}*/
	public int totalAppoientment()
	{
		int number=0;
		@SuppressWarnings("rawtypes")
		Iterator it = appoientment.entrySet().iterator();
		while (it.hasNext()) 
		{
			@SuppressWarnings("rawtypes")
			Map.Entry pair = (Map.Entry)it.next();
			number+= (Integer)pair.getValue();
		}
		return number;
	}
	/*public void printPopularSpecialization()
	{
		ArrayList<Integer> list= printPopularDoctor();
		for(Integer doctorId: list)
		{
			for(DoctersModel doctor:doctorList)
			{
				if(doctorId == doctor.getId())
					System.out.println("Popular specializatin is :"+doctor.getSpecialization());
			}
		}
	}*/
}

